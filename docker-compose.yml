# docker-compose.yml
# Complete Docker Compose setup for YouTube Channel Optimizer

version: '3.8'

services:
  # ============================================================================
  # PostgreSQL Database
  # ============================================================================
  postgres:
    image: postgres:16-alpine
    container_name: youtube_optimizer_db
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${DATABASE_NAME:-youtube_optimizer}
      POSTGRES_USER: ${DATABASE_USER:-postgres}
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "${DATABASE_PORT:-5432}:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DATABASE_USER:-postgres}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app_network

  # ============================================================================
  # Redis Cache & Queue
  # ============================================================================
  redis:
    image: redis:7-alpine
    container_name: youtube_optimizer_redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-}
    volumes:
      - redis_data:/data
    ports:
      - "${REDIS_PORT:-6379}:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app_network

  # ============================================================================
  # FastAPI Application
  # ============================================================================
  api:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: youtube_optimizer_api
    restart: unless-stopped
    environment:
      # Application
      ENVIRONMENT: ${ENVIRONMENT:-production}
      DEBUG: ${DEBUG:-false}
      
      # Database
      DATABASE_HOST: postgres
      DATABASE_PORT: 5432
      DATABASE_NAME: ${DATABASE_NAME:-youtube_optimizer}
      DATABASE_USER: ${DATABASE_USER:-postgres}
      DATABASE_PASSWORD: ${DATABASE_PASSWORD}
      
      # Redis
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD:-}
      
      # Security
      SECRET_KEY: ${SECRET_KEY}
      CLOUD_SCHEDULER_SECRET: ${CLOUD_SCHEDULER_SECRET}
      
      # YouTube API
      YOUTUBE_API_KEY: ${YOUTUBE_API_KEY}
      YOUTUBE_CLIENT_ID: ${YOUTUBE_CLIENT_ID}
      YOUTUBE_CLIENT_SECRET: ${YOUTUBE_CLIENT_SECRET}
      
      # Monitoring
      SENTRY_DSN: ${SENTRY_DSN:-}
      METRICS_ENABLED: ${METRICS_ENABLED:-true}
      
      # Celery
      CELERY_BROKER_URL: redis://:${REDIS_PASSWORD:-}@redis:6379/1
      CELERY_RESULT_BACKEND: redis://:${REDIS_PASSWORD:-}@redis:6379/2
    volumes:
      - ./logs:/app/logs
    ports:
      - "${PORT:-8000}:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - app_network

  # ============================================================================
  # Celery Worker (Background Tasks)
  # ============================================================================
  celery_worker:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: youtube_optimizer_celery
    restart: unless-stopped
    command: celery -A services.celery_app worker --loglevel=info --concurrency=4
    environment:
      ENVIRONMENT: ${ENVIRONMENT:-production}
      DATABASE_HOST: postgres
      DATABASE_PORT: 5432
      DATABASE_NAME: ${DATABASE_NAME:-youtube_optimizer}
      DATABASE_USER: ${DATABASE_USER:-postgres}
      DATABASE_PASSWORD: ${DATABASE_PASSWORD}
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD:-}
      CELERY_BROKER_URL: redis://:${REDIS_PASSWORD:-}@redis:6379/1
      CELERY_RESULT_BACKEND: redis://:${REDIS_PASSWORD:-}@redis:6379/2
      SECRET_KEY: ${SECRET_KEY}
      YOUTUBE_API_KEY: ${YOUTUBE_API_KEY}
    volumes:
      - ./logs:/app/logs
    depends_on:
      - postgres
      - redis
    networks:
      - app_network

  # ============================================================================
  # Celery Beat (Scheduler)
  # ============================================================================
  celery_beat:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: youtube_optimizer_beat
    restart: unless-stopped
    command: celery -A services.celery_app beat --loglevel=info
    environment:
      ENVIRONMENT: ${ENVIRONMENT:-production}
      DATABASE_HOST: postgres
      DATABASE_PORT: 5432
      DATABASE_NAME: ${DATABASE_NAME:-youtube_optimizer}
      DATABASE_USER: ${DATABASE_USER:-postgres}
      DATABASE_PASSWORD: ${DATABASE_PASSWORD}
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD:-}
      CELERY_BROKER_URL: redis://:${REDIS_PASSWORD:-}@redis:6379/1
      CELERY_RESULT_BACKEND: redis://:${REDIS_PASSWORD:-}@redis:6379/2
      SECRET_KEY: ${SECRET_KEY}
    volumes:
      - ./logs:/app/logs
    depends_on:
      - postgres
      - redis
    networks:
      - app_network

  # ============================================================================
  # Flower (Celery Monitoring)
  # ============================================================================
  flower:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: youtube_optimizer_flower
    restart: unless-stopped
    command: celery -A services.celery_app flower --port=5555
    environment:
      CELERY_BROKER_URL: redis://:${REDIS_PASSWORD:-}@redis:6379/1
      CELERY_RESULT_BACKEND: redis://:${REDIS_PASSWORD:-}@redis:6379/2
    ports:
      - "${FLOWER_PORT:-5555}:5555"
    depends_on:
      - redis
      - celery_worker
    networks:
      - app_network

  # ============================================================================
  # Nginx Reverse Proxy (Optional)
  # ============================================================================
  nginx:
    image: nginx:alpine
    container_name: youtube_optimizer_nginx
    restart: unless-stopped
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - api
    networks:
      - app_network
    profiles:
      - with-nginx

  # ============================================================================
  # Prometheus (Metrics Collection)
  # ============================================================================
  prometheus:
    image: prom/prometheus:latest
    container_name: youtube_optimizer_prometheus
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    networks:
      - app_network
    profiles:
      - with-monitoring

  # ============================================================================
  # Grafana (Metrics Visualization)
  # ============================================================================
  grafana:
    image: grafana/grafana:latest
    container_name: youtube_optimizer_grafana
    restart: unless-stopped
    environment:
      GF_SECURITY_ADMIN_USER: ${GRAFANA_USER:-admin}
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin}
      GF_INSTALL_PLUGINS: redis-datasource
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    ports:
      - "${GRAFANA_PORT:-3000}:3000"
    depends_on:
      - prometheus
    networks:
      - app_network
    profiles:
      - with-monitoring

# ============================================================================
# Networks
# ============================================================================
networks:
  app_network:
    driver: bridge

# ============================================================================
# Volumes
# ============================================================================
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
